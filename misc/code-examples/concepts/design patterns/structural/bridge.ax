# Класс пультов имеет ссылку на устройство, которым управляет.
# Методы этого класса делегируют работу методам связанного
# устройства.
class Remote
    @protected
    device: Device

    fn initialize (self.device)

    fn togglePower
        if device.isEnabled()
            device.disable()
        else:
            device.enable()

    fn volumeDown
        device.setVolume(device.getVolume() - 10)

    fn volumeUp
        device.setVolume(device.getVolume() + 10)

    fn channelDown
        device.setChannel(device.getChannel() - 1)

    fn channelUp
        device.setChannel(device.getChannel() + 1)


# Вы можете расширять класс пультов, не трогая код устройств.
class AdvancedRemote <- Remote
    fn mute
        device.setVolume(0)


# Все устройства имеют общий интерфейс. Поэтому с ними может
# работать любой пульт.
@interface class Device
    Enabled: bool
    fn enable
    fn disable
    fn getVolume
    fn setVolume (percent)
    fn getChannel
    fn setChannel (channel)


# Но каждое устройство имеет особую реализацию.
class Tv <- Device
    # ...

class Radio <- Device
    # ...


# Где-то в клиентском коде.
tv = new Tv()
remote = new Remote(tv)
remote.power()

radio = new Radio()
remote = new AdvancedRemote(radio)