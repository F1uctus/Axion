macro do-while-statement (
    block:     Syntax.Block,
    condition: Syntax.Infix
)
    syntax = $('do', block, ('while' | 'until'), condition)
    
    if syntax[2] == 'while'
        condition = {{ not $condition }}
    
    return {{
        while true {
            $block
            if $condition {
                break
            }
        }
    }}


macro for-in-statement (
    item:     Syntax.Atom,
    iterable: Syntax.Infix,
    block:    Syntax.Block
)
    syntax = $('for', item, 'in', iterable, block)
    
    return {{ }}


macro raise-statement (
    type-name: Syntax.TypeName,
    args-lst:  Syntax.InfixList
)
    syntax = $('raise', type-name, ['(', [args-lst], ')'])
    
    return {{ }}


macro until-statement (
    block:     Syntax.Block,
    condition: Syntax.Infix
)
    syntax = $('until', condition, block)
    
    return {{
        while not $condition {
            $block
        }
    }}


macro for-index-statement (
    init:      Syntax.Any,
    condition: Syntax.Infix,
    step:      Syntax.Infix,
    block:     Syntax.Block
)
    syntax = $('for', init, ',', condition, ',', step, block)
    
    return {{
        $init
        while $condition {
            $block
            $step
        }
    }}


macro unless-statement (
    condition: Syntax.Infix,
    block:     Syntax.Block
)
    syntax = $('unless', condition, block)
    
    return {{
        if not $condition {
            $block
        }
    }}


macro list-init-statement (
    items: Syntax.InfixExpr[]
)
    syntax = $('[', [items, {',', items}, [',']], ']')
    
    return {{ }}