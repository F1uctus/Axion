@public
class Account
    balance: int = 20
 
    @public fn withdraw (amount: int) -> bool
        if balance < amount
            return false
        balance = balance - amount
        return true

@[public, aspect]
class AccountAspect
    @final
    MIN_BALANCE = 10
 
    @pointcut fn callWithDraw (amount: int, acc: Account) {
        call(Account.withdraw(int)) and args(amount) and target(acc)
    }
 
    @advice fn before (amount: int, acc: Account) {
        check callWithDraw(amount, acc)
    }
 
    @advice fn around(amount: int, acc: Account) -> bool {
        check callWithDraw(amount, acc)
        if acc.balance < amount
            return false
        return proceed(amount, acc)
    }
 
    @advice fn after(amount: int, balance: Account) {
        check callWithDraw(amount, balance)
    }