# Builder can create different products
# using the same building process.
module Patterns.Creational.Builder.User:

# Can have GPS, trip computer and various numbers of seats.
# Can be a city car, a sports car, or a cabriolet.
class Car: pass

# Textual user's manual that corresponds to a particular
# car configuration.
class Manual: pass

# Builder interface defines all possible ways to configure a
# product.
interface Builder:
    object result { get; private set; }
    Builder reset()
    Builder setSeats(...)
    Builder setEngine(...)
    Builder setTripComputer(...)
    Builder setGPS(...)

# Concrete builders implement that interface differently.
class CarBuilder <- Builder:
    Car result { get; private set; }

    # Put a new Car instance into the "car" field.
    Builder reset() pass

    # Set the number of seats in car.
    Builder setSeats(...): pass

    # Install a given engine.
    Builder setEngine(...): pass

    # Install a trip computer.
    Builder setTripComputer(...): pass

    # Install a global positioning system.
    Builder setGPS(...): pass

# Unlike with other creational patterns, with Builder you can
# construct unrelated products, which do not follow the common
# interface.
class CarManualBuilder <- Builder:
    Manual result { get; private set; }

    # Put a new Manual instance into the "manual" field.
    Builder reset(): pass

    # Document car seats features.
    Builder setSeats(...): pass

    # Add an engine instruction.
    Builder setEngine(...): pass

    # Add a trip computer instruction.
    Builder setTripComputer(...): pass

    # Add GPS instruction.
    Builder setGPS(...): pass


# Director defines the order of building steps. It works with a
# builder object through the common builder interface.
# Therefore it may not know what product is being built.
class Director:
    void constructSportsCar(Builder builder):
        builder.reset()
            .setSeats(2)
            .setEngine(new SportEngine())
            .setTripComputer(true)
            .setGPS(true)





module Patterns.Creational.Builder.Program:

# Director gets the concrete builder object from the client
# (application code). That is because application knows better
# which builder it has to use to get a specific product.
class Application:
    (Car, Manual) makeCar():
        director = new Director()

        builder = new CarBuilder()
        director.constructSportsCar(builder)
        car = builder.result

        builder = new CarManualBuilder()
        director.constructSportsCar(builder)

        # The final product: often retrieved from a builder
        # object, since Director is not aware and not dependent
        # on concrete builders and products.
        manual = builder.result
        return (car, manual)