# This file is a part of Axion built-ins.
# It contains all standard macro definitions.


macro until-statement ('until', condition: Infix, scope: Scope)
    return {{
        while not $condition {
            $scope
        }
    }}


macro post-condition-loop ('do', scope: Scope, ('while' | 'until'), condition: Infix)
    if syntax[2] == 'while'
        condition = {{ not $condition }}
    
    return {{
        while true {
            $scope
            if $condition {
                break
            }
        }
    }}


macro unless-statement ('unless', condition: Infix, then-scope: Scope, ['else', else-scope: Scope])
    return {{
        if not $condition {
            $scope
        }
        else {
            $else-scope
        }
    }}


#====================
# x times
#     do-smth()
#====================
# uniq-name = 0
# while uniq-name < x
#     do-smth()
#     uniq-name++
#====================
macro times-statement (counter-end: Infix, 'times', scope: Scope)
    counter-name: Name
    
    return {{
        $counter-name = 0
        while $counter-name < $counter-end {
            $scope
            $counter-name++
        }
    }}


macro for-in-statement ('for', item: Atom, 'in', iterable: Infix, scope: Scope)


macro for-index-statement ('for', init: Any, ',', condition: Infix, ',', step: Infix, scope: Scope)
    return {{
        $init
        while $condition {
            $scope
            $step
        }
    }}


macro raise-statement ('raise', type-name: TypeName, ['(', [arg: Infix, [{',', arg}]], ')'])


macro match-expression (target: Any, 'match', { pattern: Infix, ':', value: Any })


macro object-initializer-expression (
    'new',
    (
        ('(', arg: Any, [{',', arg}], [','], ')')
      | (
            type-name: TypeName,
            ['(', [arg, [{',', arg}], [',']], ')'],
            ['{', [initializer: Any, [{',', initializer}], [',']], '}']
        )
    )
)


macro list-init-expression ('[', [item: Infix, [{',', item}], [',']], ']')


macro map-init-expression (
    '{',
    [
        key: Infix, ':', value: Infix,
        [{ ',', key, ':', value }],
        [',']
    ],
    '}'
)


macro set-init-expression (
    '{',
    value: Infix,
    [{ ',', value }],
    [','],
    '}'
)


macro with-statement ('with', expr: Any, scope: Scope)
    if expr is Name
        name = value
    else # l = r
        init = expr
        name = expr.Left

    return {{
        $init
        try {
            $scope
        }
        finally {
            $name.destroy()
        }
    }}