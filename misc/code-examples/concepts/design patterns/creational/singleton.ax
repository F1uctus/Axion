# user-side implementation:
# module Patterns.Creational.Singleton.User:

@singleton class Database
    fn query (sql)
        # Все запросы к базе данных будут проходить через этот
        # метод. Поэтому имеет смысл поместить сюда какую-то
        # логику кеширования.
        raise (NotImplementedError)

    @private
        fn init
            # Здесь может жить код инициализации подключения к
            # серверу баз данных.
            raise (NotImplementedError)


# internal/system implementation:
# module Patterns.Creational.Singleton.Internal:

class Database
    @static fn instance.get
        if self.instance == null
            acquireThreadLock()
            if self.instance == null
                self.instance = new Database()
        return self.instance

    fn query (sql)
        raise (NotImplementedError)

    @private
        static Database instance

        fn init
            raise (NotImplementedError)


# client code:
# module Patterns.Creational.Singleton.Program:

class Program
    fn main
        foo = Database.instance
        foo.query("SELECT ...")
        # ...
        bar = Database.instance
        bar.query("SELECT ...")
        # Переменная "bar" содержит тот же объект, что и
        # переменная "foo".