# Абстрактная фабрика знает обо всех абстрактных типах
# продуктов.
@abstract
class GUI
    # Этот паттерн предполагает, что у вас есть несколько семейств
    # продуктов, находящихся в отдельных иерархиях классов
    # (Button/Checkbox). Продукты одного семейства должны иметь
    # общий интерфейс.
    class Element
        # Отрисовать элемент.
        fn render

        # Навесить на элемент обработчик событий.
        fn on-mouse-over (function: func)

    class Button <- Element

    class Checkbox <- Element

    class Dialog <- Element

######################################
# EXAMPLE #1: DEFAULT TYPE OF FACTORY.
######################################

# Каждая конкретная фабрика знает и создаёт только продукты
# своей вариации.
class Windows-GUI <- GUI
    class Button
        # Отрисовать кнопку в стиле Windows.
        fn render

        # Навесить на кнопку обработчик событий Windows.
        fn on-mouse-over

    class Checkbox
        # Отрисовать чекбокс в стиле Windows.
        fn render

        # Навесить на чекбокс обработчик событий Windows.
        fn on-mouse-over

    class Dialog
        # Отрисовать окно в Windows.
        fn render

        # Навесить на окно обработчик событий.
        fn on-mouse-over

#####################################################################
# EXAMPLE #2: SPLIT FACTORY TO PARTS TO MOVE THEM TO DIFFERENT FILES.
#####################################################################

# Несмотря на то, что фабрики оперируют конкретными классами,
# их методы возвращают абстрактные типы продуктов. Благодаря
# этому фабрики можно взаимозаменять, не изменяя клиентский
# код.
@partial
class Mac-GUI <- GUI
    class Button
        # Отрисовать кнопку в стиле macOS.
        fn render

        # Навесить на чекбокс обработчик событий.
        fn on-mouse-over

@partial
class Mac-GUI <- GUI
    class Checkbox
        # Отрисовать чекбокс в стиле macOS.
        fn render

        # Навесить на чекбокс обработчик событий.
        fn on-mouse-over

@partial
class Mac-GUI <- GUI
    class Dialog
        # Отрисовать окно в macOS.
        fn render

        # Навесить на окно обработчик событий.
        fn on-mouse-over

#####################################################################
# EXAMPLE #3: SPLIT FACTORY TO PARTS TO MOVE THEM TO DIFFERENT FILES.
#####################################################################

class Web-GUI <- GUI

# TODO: class-name.subclass-name
class Web-GUI-Button
    # Отрисовать кнопку в браузере.
    fn render

    # Навесить на чекбокс обработчик событий.
    fn on-mouse-over

class Web-GUI-Checkbox
    # Отрисовать чекбокс в браузере.
    fn render

    # Навесить на чекбокс обработчик событий.
    fn on-mouse-over

class Web-GUI-Dialog
    # Отрисовать окно в браузере.
    fn render

    # Навесить на окно обработчик событий.
    fn on-mouse-over

######################################
# Client code.
######################################

# Для кода, использующего фабрику, не важно, с какой конкретно
# фабрикой он работает. Все получатели продуктов работают с
# ними через общие интерфейсы.
class Application
    @private
        factory: GUI
        button:  Button

    fn init (factory: GUI)
        self.factory = factory

    fn create-UI
        button = factory.Dialog()

    fn render
        dialog.render()


# Приложение выбирает тип конкретной фабрики и создаёт её
# динамически, исходя из конфигурации или окружения.
class ApplicationConfigurator
    fn start
        config = read-application-config-file()

        if config.Platform == Platform.Windows
            factory = Windows-GUI
        elif config.Platform == Platform.Mac
            factory = Mac-GUI
        elif config.Platform == Platform.Web
            factory = Web-GUI
        else
            raise Exception("Error! Unknown operating system.")

        app = Application(factory)
