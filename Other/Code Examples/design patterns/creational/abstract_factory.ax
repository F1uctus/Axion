# Абстрактная фабрика знает обо всех абстрактных типах
# продуктов.
@abstract
class GUI:
    # Этот паттерн предполагает, что у вас есть несколько семейств
    # продуктов, находящихся в отдельных иерархиях классов
    # (Button/Checkbox). Продукты одного семейства должны иметь
    # общий интерфейс.
    class Element:
        # Отрисовать элемент.
        fn render(): pass

        # Навесить на элемент обработчик событий.
        fn on-mouse-over(function: func): pass

    class Button(Element): pass

    class Checkbox(Element): pass

    class Dialog(Element): pass

######################################
# EXAMPLE #1: DEFAULT TYPE OF FACTORY.
######################################

# Каждая конкретная фабрика знает и создаёт только продукты
# своей вариации.
class Windows-GUI(GUI):
    class Button:
        fn render():
            # Отрисовать кнопку в стиле Windows.
            pass

        fn on-mouse-over():
            # Навесить на кнопку обработчик событий Windows.
            pass

    class Checkbox:
        fn render():
            # Отрисовать чекбокс в стиле Windows.
            pass

        fn on-mouse-over():
            # Навесить на чекбокс обработчик событий Windows.
            pass

    class Dialog:
        fn render():
            # Отрисовать окно в браузере.
            pass

        fn on-mouse-over():
            # Навесить на окно обработчик событий.
            pass

#####################################################################
# EXAMPLE #2: SPLIT FACTORY TO PARTS TO MOVE THEM TO DIFFERENT FILES.
#####################################################################

# Несмотря на то, что фабрики оперируют конкретными классами,
# их методы возвращают абстрактные типы продуктов. Благодаря
# этому фабрики можно взаимозаменять, не изменяя клиентский
# код.
@partial
class Mac-GUI(GUI):
    class Button:
        fn render():
            # Отрисовать кнопку в стиле macOS.
            pass

        fn on-mouse-over():
            # Навесить на чекбокс обработчик событий.
            pass

@partial
class Mac-GUI(GUI):
    class Checkbox:
        fn render():
            # Отрисовать чекбокс в стиле macOS.
            pass

        fn on-mouse-over():
            # Навесить на чекбокс обработчик событий.
            pass

@partial
class Mac-GUI(GUI):
    class Dialog:
        fn fn render():
            # Отрисовать окно в браузере.
            pass

        fn on-mouse-over():
            # Навесить на окно обработчик событий.
            pass

#####################################################################
# EXAMPLE #3: SPLIT FACTORY TO PARTS TO MOVE THEM TO DIFFERENT FILES.
#####################################################################

class Web-GUI(GUI): pass

class Web-GUI.Button:
    fn render():
        # Отрисовать кнопку в браузере.
        pass

    fn on-mouse-over():
        # Навесить на чекбокс обработчик событий.
        pass

class Web-GUI.Checkbox:
    fn render():
        # Отрисовать чекбокс в браузере.
        pass

    fn on-mouse-over():
        # Навесить на чекбокс обработчик событий.
        pass

class Web-GUI.Dialog:
    fn render():
        # Отрисовать окно в браузере.
        pass

    fn on-mouse-over():
        # Навесить на окно обработчик событий.
        pass

######################################
# Client code.
######################################

# Для кода, использующего фабрику, не важно, с какой конкретно
# фабрикой он работает. Все получатели продуктов работают с
# ними через общие интерфейсы.
class Application:
    #private:
    GUI    factory
    Button button

    fn new(factory: GUI):
        self.factory = factory

    fn create-UI()
        button = factory.Dialog()

    fn render()
        dialog.render()


# Приложение выбирает тип конкретной фабрики и создаёт её
# динамически, исходя из конфигурации или окружения.
class ApplicationConfigurator:
    fn start():
        config = read-application-config-file()

        if config.Platform == Platform.Windows:
            factory = Windows-GUI
        elif config.Platform == Platform.Mac:
            factory = Mac-GUI
        elif config.Platform == Platform.Web:
            factory = Web-GUI
        else:
            pass
            #throw new Exception("Error! Unknown operating system.")

        app = Application(factory)
