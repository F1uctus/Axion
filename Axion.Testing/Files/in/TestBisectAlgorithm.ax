# finds where the function becomes 0 in range using bolzano
fn bisection (func: double -> double, start: double, end: double) -> double
    if func(start) == 0
        return start
    elif func(end) == 0
        return end
    # if none of range start/end are root and they are both positive or negative.
    elif func(start) * func(end) > 0
        new Exception("couldn't find root in specified range.") |> throw
    else
        mid = start + (end - start) / 2
        # until we achieve precise equals to 10^-7
        while Math.Abs(start - mid) > 10 ** -7
            if func(mid) == 0
                return mid
            elif func(mid) * func(start) < 0
                end = mid
            else
                start = mid
            mid = start + (end - start) / 2
        return mid


fn f (x: double) -> double
    return x**3 - 2*x - 5

Console.WriteLine(bisection(f, 0, 10))