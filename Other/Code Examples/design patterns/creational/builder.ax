# Builder can create different products
# using the same building process.
module Patterns.Creational.Builder.User

# Can have GPS, trip computer and various numbers of seats.
# Can be a city car, a sports car, or a cabriolet.
class Car: pass

# Textual user's manual that corresponds to a particular
# car configuration.
class Manual: pass

# Builder interface defines all possible ways to configure a
# product.
interface Builder:
    result: object# { get; private set; }
    fn reset() => Builder: pass
    fn setSeats() => Builder: pass
    fn setEngine() => Builder: pass
    fn setTripComputer() => Builder: pass
    fn setGPS() => Builder: pass

# Concrete builders implement that interface differently.
class CarBuilder(Builder):
    result: Car #{ get; private set; }

    # Put a Car instance into the "car" field.
    fn reset(): pass

    # Set the number of seats in car.
    fn setSeats(): pass

    # Install a given engine.
    fn setEngine(): pass

    # Install a trip computer.
    fn setTripComputer(): pass

    # Install a global positioning system.
    fn setGPS(): pass

# Unlike with other creational patterns, with Builder you can
# construct unrelated products, which do not follow the common
# interface.
class CarManualBuilder(Builder):
    result: Manual #{ get; private set; }

    # Put a Manual instance into the "manual" field.
    fn reset(): pass

    # Document car seats features.
    fn setSeats(): pass

    # Add an engine instruction.
    fn setEngine(): pass

    # Add a trip computer instruction.
    fn setTripComputer(): pass

    # Add GPS instruction.
    fn setGPS(): pass


# Director defines the order of building steps. It works with a
# builder object through the common builder interface.
# Therefore it may not know what product is being built.
class Director:
    fn constructSportsCar(builder: Builder):
        builder.reset()
            .setSeats(2)
            .setEngine(SportEngine())
            .setTripComputer(true)
            .setGPS(true)





module Patterns.Creational.Builder.Program

# Director gets the concrete builder object from the client
# (application code). That is because application knows better
# which builder it has to use to get a specific product.
class Application:
    fn makeCar() => (Car, Manual):
        director = Director()

        builder = CarBuilder()
        director.constructSportsCar(builder)
        car = builder.result

        builder = CarManualBuilder()
        director.constructSportsCar(builder)

        # The final product: often retrieved from a builder
        # object, since Director is not aware and not dependent
        # on concrete builders and products.
        manual = builder.result
        return (car, manual)